@startuml MazeRunner
'
' Översikt: Speldomän och kärnmekanik
' Detta diagram visar spelets huvudkomponenter: labyrintstruktur, spelare,
' samlarobjekt (nyckel, bonuspoäng, power-ups) och förmågor (stun, confusion, speed boost).
' Designen använder interface-baserad arkitektur för flexibilitet och testbarhet.
'
skinparam packageStyle rectangle
skinparam shadowing true
skinparam linetype ortho
skinparam defaultFontName Arial
left to right direction

package "Player System" {
    interface IPlayer {
        Guid Id
        string Name
        Point Position
        Direction Facing
        int Score
        int ViewportRadius
        IAbility[] Abilities
        IItem[] Inventory
        PlayerState State
        void Move(Direction direction)
        void UseAbility(int slot, IPlayer target)
        void CollectItem(ICollectible collectible)
    }
    
    enum PlayerState {
        NORMAL
        STUNNED
        CONFUSED
        SPEED_BOOSTED
    }
    
    enum Direction {
        NORTH
        EAST
        SOUTH
        WEST
    }
}

together {
    package "Maze Structure" {
        interface IMaze {
            int Width
            int Height
            Point StartPoint
            Point ExitPoint
            KeyItem Key
            IMazeCell GetCell(Point position)
            bool IsValidMove(Point from, Point to)
            IEnumerable<Point> GetVisibleCells(Point center, int radius)
        }
        
        interface IMazeCell {
            Point Position
            CellType Type
            ICollectible[] Collectibles
            void AddCollectible(ICollectible item)
            void RemoveCollectible(ICollectible item)
        }
        
        enum CellType {
            EMPTY
            WALL
            START
            EXIT
        }
    }
    
    package "Collectibles Base" {
        interface ICollectible {
            Guid Id
            Point Position
            void OnCollect(IPlayer player)
        }
        
        interface IAutoActivatable {
            void AutoActivate(IPlayer player)
        }
        
        interface IScoreReward {
            int Points
            void AwardPoints(IPlayer player)
        }
    }
}

together {
    package "Items" {
        interface IItem {
            string Name
            void Use(IPlayer player)
        }
        
        class KeyItem {
            bool IsCollected
            void OnCollect(IPlayer player)
        }
        
        class HealthPack {
            int HealAmount
            void AutoActivate(IPlayer player)
        }
        
        class BonusScore {
            int Points
            void AutoActivate(IPlayer player)
        }
        
        class SpeedBoostItem {
            double SpeedMultiplier
            TimeSpan Duration
            void AutoActivate(IPlayer player)
        }
        
        class VisionBoostItem {
            int ExtraRadius
            TimeSpan Duration
            void AutoActivate(IPlayer player)
        }
        
        class AbilityPickup {
            IAbility GrantedAbility
            void OnCollect(IPlayer player)
        }
    }
    
    
    
    package "Abilities" {
        interface IAbility {
            string Name
            TimeSpan Cooldown
            DateTime? LastUsed
            bool IsReady()
            void Use(IPlayer caster, IPlayer target)
        }
        
        class StunShotAbility {
            TimeSpan StunDuration
            void Use(IPlayer caster, IPlayer target)
        }
        
        class ConfusionBeamAbility {
            TimeSpan Duration
            void Use(IPlayer caster, IPlayer target)
        }
        
        class SpeedBoostAbility {
            double SpeedMultiplier
            TimeSpan Duration
            void Use(IPlayer caster, IPlayer target)
        }
        
        class CompassHelpAbility {
            void Use(IPlayer caster, IPlayer target)
        }
        
        class TrapAbility {
            TimeSpan TrapDuration
            Point TrapPosition
            void Use(IPlayer caster, IPlayer target)
        }
    }
}

' ===== Core Relations =====
IMaze "1" o-- "*" IMazeCell : grid >
IMazeCell "*" o-- "*" ICollectible : contains >
IMaze "1" o-- "1" KeyItem : spawns >

' ===== Player Relations =====
IPlayer "1" o-- "0..3" IAbility : equipped >
IPlayer "1" o-- "0..3" IItem : inventory >

' ===== Collectible Hierarchy =====
ICollectible <|.. IItem
ICollectible <|.. IAbility
ICollectible <|.. IScoreReward

' ===== Auto-Activate Interface =====
IAutoActivatable <|.. HealthPack
IAutoActivatable <|.. BonusScore
IAutoActivatable <|.. SpeedBoostItem
IAutoActivatable <|.. VisionBoostItem

' ===== Item Implementations =====
IItem <|.. KeyItem
IItem <|.. HealthPack
IItem <|.. SpeedBoostItem
IItem <|.. VisionBoostItem
IItem <|.. AbilityPickup

' ===== Score Rewards =====
IScoreReward <|.. BonusScore

' ===== Ability Implementations =====
IAbility <|.. StunShotAbility
IAbility <|.. ConfusionBeamAbility
IAbility <|.. SpeedBoostAbility
IAbility <|.. CompassHelpAbility
IAbility <|.. TrapAbility

@enduml