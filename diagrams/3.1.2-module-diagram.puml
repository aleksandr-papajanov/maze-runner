@startuml MazeRunner-Architecture
'
' Overview: System architecture and module components
' This diagram shows MazeRunner's layered architecture:
' - Client Layer: React-based player and spectator clients
' - Communication Layer: SignalR (WebSocket) for realtime, REST for initial connection
' - Server Core Layer: Game Controller, Session Manager, Connection Manager, Game Logic
' - Persistence Layer: SQLite for high scores and session history
' Shows clear interfaces and data dependencies between modules.
'
skinparam componentStyle rectangle
skinparam shadowing true
skinparam linetype ortho
skinparam defaultFontName Arial

package "Client Layer (Browser)" {
    component "Player Client" as PlayerClient <<React + TypeScript>> {
        component [Game Renderer] as Renderer
        component [Input Controller] as Input
        component [UI Components] as UI
        component [WebSocket Client] as WSClient
    }
    
    component "Spectator Client" as SpectatorClient <<React + TypeScript>> {
        component [Full Map Renderer] as SpectatorRenderer
        component [WebSocket Client] as SpectatorWS
    }
}

package "Communication Layer" {
    component "SignalR Hub" as SignalR <<Thin Transport Adapter>> {
        note right: Delegates to ConnectionManager
    }
    
    component "REST API" as REST {
        portin "/sessions"
        portin "/highscores"
    }
}

package "Server Core Layer" <<C# ASP.NET Core>> {
    component "Game Controller" as GameController {
        component [Session Manager] as SessionMgr
        component [Connection Manager] as ConnMgr
    }
    
    component "Game Logic" as GameLogic {
        component [Game Session] as Session
        component [Maze Generator] as MazeGen
        component [Collision Detection] as Collision
        component [Win Condition] as WinCheck
    }
    
    component "Connection Types" as Connections {
        component [Player Connection] as PlayerConn
        component [Spectator Connection] as SpectatorConn
    }
    
    component "Action Bus" as ActionBus {
        note right: Each session owns its\nisolated Action Bus
    }
    
    component "Domain Model" as Domain {
        component [Player] as Player
        component [Maze & Cells] as Maze
        component [Collectibles] as Items
        component [Abilities] as Abilities
    }
}

package "Persistence Layer" {
    database "SQLite Database" as DB {
        component [High Scores] as Scores
        component [Session History] as History
    }
}

' Client to Communication
PlayerClient -down-> SignalR : "WebSocket\n(actions)"
PlayerClient -down-> REST : "HTTP\n(join/create)"
SpectatorClient -down-> SignalR : "WebSocket\n(connect)"

' Communication to Server Core (SignalR is thin adapter)
SignalR -down-> ConnMgr : "Delegate all\nmessages"
REST -down-> GameController : "Session\nManagement"

' GameController internal structure
GameController --> SessionMgr : "owns"
GameController --> ConnMgr : "owns"

' Connection Manager manages connections
ConnMgr --> PlayerConn : "manages"
ConnMgr --> SpectatorConn : "manages"

' Session Manager manages sessions
SessionMgr --> Session : "manages"

' Game Session composition
Session --> ActionBus : "owns"
Session --> MazeGen : "uses"
Session --> Collision : "uses"
Session --> WinCheck : "uses"
Session --> Domain : "uses domain entities"

' Connections interact with sessions
PlayerConn --> ActionBus : "publishes/\nsubscribes"
PlayerConn --> Session : "belongs to"

' Server to Persistence
Session -down-> DB : "Save State\n& Scores"
SessionMgr -down-> DB : "Query\nHistory"

note right of PlayerClient
  Responsive UI for:
  - Mobile (joystick)
  - Desktop (keyboard)
  Fog of war rendering
end note

note right of ConnMgr
  **Single entry point for WebSocket messages**
  • Handles both players & spectators
  • Routes actions to correct connection
  • Manages connection lifecycle
  • No separate SpectatorManager
  
  SignalR Hub is just thin adapter!
end note

note right of ActionBus
  Pub/Sub pattern
  Isolated per session
  PlayerConnection = Publisher + Subscriber
end note

note bottom of DB
  SQLite - embedded
  No external DB needed
  Portable for demos
end note

@enduml